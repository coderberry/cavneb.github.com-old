<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Grails | coderberry]]></title>
  <link href="http://cavneb.github.com/blog/categories/grails/atom.xml" rel="self"/>
  <link href="http://cavneb.github.com/"/>
  <updated>2011-10-18T17:36:23-06:00</updated>
  <id>http://cavneb.github.com/</id>
  <author>
    <name><![CDATA[Eric Berry]]></name>
    <email><![CDATA[coderberry@me.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Multi-Associative GORM Criteria with Projections]]></title>
    <link href="http://cavneb.github.com/blog/2011/03/29/multi-associative-gorm-criteria-with-projections/"/>
    <updated>2011-03-29T00:00:00-06:00</updated>
    <id>http://cavneb.github.com/blog/2011/03/29/multi-associative-gorm-criteria-with-projections</id>
    <content type="html"><![CDATA[<p>I have three domain classes: Lead, Submission and BuyerLog:</p>

<p>``` java
class Lead {
  static hasMany = [ submissions: Submission ]
  Date dateCreated
  // ...
}</p>

<p>class Submission {
  static belongsTo = [ lead: Lead ]
  static hasMany = [ buyerLogs: BuyerLog ]
  Lead lead
  // ...
}</p>

<p>class BuyerLog {
  static belongsTo = [ submission: Submission ]
  Submission submission
  String leadBuyer
  // ...
}
```</p>

<p>I have a need to get the number of duplicate leads which share the same leadBuyer (in the BuyerLog domain class). Here is the SQL:</p>

<p>``` sql
SELECT count(l.id)
  FROM lead AS l, submission AS s, buyerLog as bl</p>

<pre><code>WHERE l.id = s.leadId
  AND s.id = bl.submissionId
  AND bl.leadBuyer = $buyerName
  AND l.id != $lead.id
  AND l.dateCreated::date &gt; $daysAgo
</code></pre>

<p>```</p>

<p>I want to do this using GORM / Criteria Builder. Here's my final code:</p>

<p>``` java
/<em>*
 * Count duplicate submissions within 45 days
 * SELECT count(l.id)
 *      FROM lead AS l, submission AS s, buyerLog as bl
 *      WHERE l.id = s.leadId
 *          AND s.id = bl.submissionId
 *          AND bl.leadBuyer = $buyerName
 *          AND l.id != $lead.id
 *          AND l.dateCreated::date > $daysAgo
 </em>/
protected def Boolean isDuplicateSubmission(Lead lead, ArrayList<String> buyerNames) {
  def isDuplicate = false
  def daysAgo = new Date() - 45
  def cnt = Lead.withCriteria {</p>

<pre><code>not {
  idEq(lead.id)
}
and {
  le('dateCreated', daysAgo)
  submissions {
    buyerLogs {
      inList('leadBuyer', buyerNames)
    }
  }
}
projections {
  rowCount()
}
</code></pre>

<p>  }
  return (cnt > 0)
}
```</p>

<p>Thanks to schmolly159 on the #grails freenode IRC channel for the examples and continued help.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Paginator for those suffering from PostgreSQL count(*) speed issues]]></title>
    <link href="http://cavneb.github.com/blog/2010/11/24/paginator-for-those-suffering-from-postgresql-count-star-speed-issues/"/>
    <updated>2010-11-24T00:00:00-07:00</updated>
    <id>http://cavneb.github.com/blog/2010/11/24/paginator-for-those-suffering-from-postgresql-count-star-speed-issues</id>
    <content type="html"><![CDATA[<p>Our company has been using PostgreSQL for  a very long time and has found it a very solid product for our needs. One thing that we've run into is that as our database grows (1mil+
records), there is a major slowdown on page loads due to a <a href="http://sql-info.de/postgresql/postgres-gotchas.html#1_7">PostgreSQL bug</a>.</p>

<p>To resolve this, I had to re-create a new paginator that didn't rely on the count(*) sql call. I changed it to work similar to how Google performs their queries relying solely on the offset and max to determine which pagination buttons to show.</p>

<p>Here's my final taglib:</p>

<p>``` java
package com.example</p>

<p>import org.springframework.web.servlet.support.RequestContextUtils as RCU</p>

<p>class PagerTagLib {</p>

<p>  /<em><em>
   * Creates next/previous links to support pagination for the current controller
   * This is developed to avoid problems with the PostgreSQL count(</em>) bug.
   * http://sql-info.de/postgresql/postgres-gotchas.html#1_7
   *
   * &lt;g:pager total="${accountListInstance.size()}" params="${params}" />
   </em>/
  def pager = { attrs -></p>

<pre><code>  def writer = out
  if (attrs.total == null) {
      throwTagError("Tag [pager] is missing required attribute [total] which is the total showing for the current page")
  }

  def messageSource = grailsAttributes.messageSource
  def locale = RCU.getLocale(request)

def total = attrs.int('total') ?: 0

  def action = (attrs.action ? attrs.action : (params.action ? params.action : "list"))
  def offset = params.int('offset') ?: 0
  def max = params.int('max')

  if (!offset) offset = (attrs.int('offset') ?: 0)
  if (!max) max = (attrs.int('max') ?: 10)

  def linkParams = [:]
  if (attrs.params) linkParams.putAll(attrs.params)
  linkParams.offset = offset - max
  linkParams.max = max
  if (params.sort) linkParams.sort = params.sort
  if (params.order) linkParams.order = params.order

  def linkTagAttrs = [action:action]
  if (attrs.controller) {
      linkTagAttrs.controller = attrs.controller
  }
  if (attrs.id!=null) {
      linkTagAttrs.id = attrs.id
  }
  linkTagAttrs.params = linkParams

  // determine paging variables
def isFirstStep = (offset == 0)
def isLastStep = (total &lt; max)

  // display previous link when not on firststep
  if (!isFirstStep) {
      linkTagAttrs.class = 'prevLink'
      linkParams.offset = offset - max
      writer &lt;&lt; link(linkTagAttrs.clone()) {
          (attrs.prev ? attrs.prev : messageSource.getMessage('paginate.prev', null, messageSource.getMessage('default.paginate.prev', null, 'Previous', locale), locale))
      }
  }

  // display next link when not on laststep
  if (!isLastStep) {
      linkTagAttrs.class = 'nextLink'
      linkParams.offset = offset + max
      writer &lt;&lt; link(linkTagAttrs.clone()) {
          (attrs.next ? attrs.next : messageSource.getMessage('paginate.next', null, messageSource.getMessage('default.paginate.next', null, 'Next', locale), locale))
      }
  }
</code></pre>

<p>  }</p>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Grails Screencasts]]></title>
    <link href="http://cavneb.github.com/blog/2010/11/12/grails-screencasts/"/>
    <updated>2010-11-12T00:00:00-07:00</updated>
    <id>http://cavneb.github.com/blog/2010/11/12/grails-screencasts</id>
    <content type="html"><![CDATA[<p>Here are several screencasts that I did for <a href="http://teachmetocode.com/screencasts/tag/grails">TeachMeToCode.com</a></p>

<h2><a href="http://teachmetocode.com/screencasts/introduction-to-grails-part-1/">Introduction to Grails – Part 1</a></h2>

<p>Are you new to Grails? Grails is an excellent alternative to Ruby on Rails, which uses Groovy / Java. In this screencast, learn how to create a simple CRUD system with Grails.</p>

<h2><a href="http://teachmetocode.com/screencasts/introduction-to-grails-part-2/">Introduction to Grails – Part 2</a></h2>

<p>In this screencast, we continue on our task of creating a ‘Stack Overflow’ clone by adding more domain classes and relationships between them. We also cover how to test your classes using integration tests.</p>

<h2><a href="http://teachmetocode.com/screencasts/skinning-in-grails/">Skinning in Grails</a></h2>

<p>In this screencast, I cover how to use custom Grails configurations along with filters to enable url-based site skins.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Uploading Files in Grails]]></title>
    <link href="http://cavneb.github.com/blog/2010/10/12/uploading-files-in-grails/"/>
    <updated>2010-10-12T00:00:00-06:00</updated>
    <id>http://cavneb.github.com/blog/2010/10/12/uploading-files-in-grails</id>
    <content type="html"><![CDATA[<p>Here's the slides from a presentation I did at the
<a href="http://groups.google.com/group/uggug">UGGUG</a> in May 2010. I
found that I needed to use it again today so I posted it.</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/4000139" width="565" height="400" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe>


<p>Here is the source code for the uploader service I created:</p>

<p>``` java
package berry</p>

<p>import org.springframework.web.multipart.MultipartFile
import org.codehaus.groovy.grails.web.context.ServletContextHolder</p>

<p>class FileUploadService {</p>

<pre><code>boolean transactional = true

def String uploadFile(MultipartFile file, 
  String name, String destinationDirectory) {

    def servletContext = ServletContextHolder.servletContext
    def storagePath = servletContext.getRealPath(destinationDirectory)

    // Create storage path directory if it does not exist
    def storagePathDirectory = new File(storagePath)
    if (!storagePathDirectory.exists()) {
        print "CREATING DIRECTORY ${storagePath}: "
        if (storagePathDirectory.mkdirs()) {
            println "SUCCESS"
        } else {
            println "FAILED"
        }
    }

    // Store file
    if (!file.isEmpty()) {
        file.transferTo(new File("${storagePath}/${name}"))
        println "Saved file: ${storagePath}/${name}"
        return "${storagePath}/${name}"

    } else {
        println "File ${file.inspect()} was empty!"
        return null
    }
}
</code></pre>

<p>}
```</p>

<p>A tip that you may enjoy is the way I implemented this uploader into a real world application. I wanted to be able to upload files into a folder within the web-app folder for development, but in production, I wanted to put it in a folder that is served via Tomcat directly. So on our production server, I created a folder at /opt/assets and created a symbolic link in the $TOMCAT_ROOT/webapps/assets to point to it. I modified the service as follows:</p>

<p>``` java
package berry</p>

<p>import org.springframework.web.multipart.MultipartFile
import org.codehaus.groovy.grails.web.context.ServletContextHolder
import grails.util.GrailsUtil</p>

<p>class FileUploadService {</p>

<p>  boolean transactional = true</p>

<p>  def String uploadFile(MultipartFile file, String name) {</p>

<pre><code>String storagePath = ""
if (GrailsUtil.environment == "production") {
  storagePath = "/opt/assets"
} else {
  def servletContext = ServletContextHolder.servletContext
  storagePath = servletContext.getRealPath('assets')
}

// Create storage path directory if it does not exist
def storagePathDirectory = new File(storagePath)
if (!storagePathDirectory.exists()) {
  print "CREATING DIRECTORY ${storagePath}: "
  if (storagePathDirectory.mkdirs()) {
    println "SUCCESS"
  } else {
    println "FAILED"
  }
}

// Store file
if (!file.isEmpty()) {
  file.transferTo(new File("${storagePath}/${name}"))
  println "Saved file: ${storagePath}/${name}"
  return "${storagePath}/${name}"
} else {
  println "File ${file.inspect()} was empty!"
  return null
}
</code></pre>

<p>  }
}
```</p>

<p>I then create a folder in my web-app folder named 'assets', being sure to add it to my ignore list for the repository. So once I upload the file, it will save to the correct location.</p>

<p><code>html
&lt;img src="${resource(dir:'assets', file: 'myfile.jpg')}" /&gt;
</code></p>

<p>This now will work in both DEVELOPMENT and PRODUCTION enviroments.</p>

<p><a href="http://github.com/cavneb/FileUploader">http://github.com/cavneb/FileUploader</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Passing Data From View to Layout via pageProperty]]></title>
    <link href="http://cavneb.github.com/blog/2010/10/08/passing-data-from-view-to-layout-via-pageproperty/"/>
    <updated>2010-10-08T00:00:00-06:00</updated>
    <id>http://cavneb.github.com/blog/2010/10/08/passing-data-from-view-to-layout-via-pageproperty</id>
    <content type="html"><![CDATA[<p>I am writing a new Grails application which uses the website template Admintasia. Part of the layout gsp file has a section for the header and sub-header. For this to be used, I needed to be able to pass those two strings from the view to the layout.</p>

<p>Here's what my view looks like:</p>

<p><code>html
&lt;html&gt;
&lt;head&gt;
  &lt;meta name="layout" content="admintasia"/&gt;
  &lt;meta name="pageHeader" content="This is a test" /&gt;
  &lt;meta name="pageSubHeader" content="blah blah blah" /&gt;
&lt;/head&gt;
&lt;body&gt;
...
</code></p>

<p>And here's what my layout looks like:</p>

<p>``` html</p>

<h2><g:pageProperty name="meta.pageHeader" 
                    default="MISSING PAGE HEADER" /></h2>




<h4><g:pageProperty name="meta.pageSubHeader" 
                    default="" /></h4>


<p>```</p>

<p>I hope this helps out!</p>
]]></content>
  </entry>
  
</feed>
