<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Groovy | coderberry]]></title>
  <link href="http://cavneb.github.com/blog/categories/groovy/atom.xml" rel="self"/>
  <link href="http://cavneb.github.com/"/>
  <updated>2011-11-02T10:03:28-06:00</updated>
  <id>http://cavneb.github.com/</id>
  <author>
    <name><![CDATA[Eric Berry]]></name>
    <email><![CDATA[coderberry@me.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Grails Screencasts]]></title>
    <link href="http://cavneb.github.com/blog/2010/11/12/grails-screencasts/"/>
    <updated>2010-11-12T00:00:00-07:00</updated>
    <id>http://cavneb.github.com/blog/2010/11/12/grails-screencasts</id>
    <content type="html"><![CDATA[<p>Here are several screencasts that I did for <a href="http://teachmetocode.com/screencasts/tag/grails">TeachMeToCode.com</a></p>

<h2><a href="http://teachmetocode.com/screencasts/introduction-to-grails-part-1/">Introduction to Grails – Part 1</a></h2>

<p>Are you new to Grails? Grails is an excellent alternative to Ruby on Rails, which uses Groovy / Java. In this screencast, learn how to create a simple CRUD system with Grails.</p>

<h2><a href="http://teachmetocode.com/screencasts/introduction-to-grails-part-2/">Introduction to Grails – Part 2</a></h2>

<p>In this screencast, we continue on our task of creating a ‘Stack Overflow’ clone by adding more domain classes and relationships between them. We also cover how to test your classes using integration tests.</p>

<h2><a href="http://teachmetocode.com/screencasts/skinning-in-grails/">Skinning in Grails</a></h2>

<p>In this screencast, I cover how to use custom Grails configurations along with filters to enable url-based site skins.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Tag Lib within Controllers and Services]]></title>
    <link href="http://cavneb.github.com/blog/2010/10/07/using-tag-lib-within-controllers-and-services/"/>
    <updated>2010-10-07T00:00:00-06:00</updated>
    <id>http://cavneb.github.com/blog/2010/10/07/using-tag-lib-within-controllers-and-services</id>
    <content type="html"><![CDATA[<p>So let's say you want to utilize the standard grails tag lib
of formatNumber within your domain class, controller or
service. How would you go about doing it? With the help of a
blog post by <a href="http://lucastex.com.br/2010/02/03/como-acessar-uma-taglib-de-dentro-de-um-service/">Lucas Teixeira</a>, I was able to get it working without
an issue. Here is the code:</p>

<p>``` java
class Book {</p>

<p>  def grailsApplication</p>

<p>  String title
  Float cost</p>

<p>  static constraints = {</p>

<pre><code>title(blank: false)
cost(blank: false)
</code></pre>

<p>  }</p>

<p>  def String toDisplayString() {</p>

<pre><code>def g = grailsApplication.mainContext.getBean(
  'org.codehaus.groovy.grails.plugins.web.taglib.ApplicationTagLib'
)
return "${title} costs ${g.formatNumber(
  [number: cost, type: "currency", currencyCode: "USD"]
)}"
</code></pre>

<p>  }</p>

<p>}
```</p>

<p>It's also simple to utilize your own tag libs as well. Here's a tag lib that I created to help with XML formatting:</p>

<p>``` java
class CommonTagLib {</p>

<pre><code>static namespace = 'berry'

def formatXML = { attrs, body -&gt;
    String rawXML = body().toString()
    try {
        def slurpedXML = new XmlSlurper().parseText(rawXML)
        def writer = new StringWriter()
        new XmlNodePrinter(new PrintWriter(writer)).print(slurpedXML)
        def formattedResponse = writer.toString()
        out &lt;&lt; formattedResponse
    } catch(Exception e) {
        log.info "Unable to parse XML: ${e.message}"
        out &lt;&lt; rawXML
    }
}
</code></pre>

<p>}
```</p>

<p>So to call this tag lib in the domain class, controller or service, I just need to do the following:</p>

<p><code>java
def berry = grailsApplication.mainContext.getBean('CommonTagLib')
return berry.formatXML("....")
</code></p>

<p>Just make sure that you include the 'def grailsApplication' in the beginning.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Criteria Builder with Projections]]></title>
    <link href="http://cavneb.github.com/blog/2010/10/06/using-criteria-builder-with-projections/"/>
    <updated>2010-10-06T00:00:00-06:00</updated>
    <id>http://cavneb.github.com/blog/2010/10/06/using-criteria-builder-with-projections</id>
    <content type="html"><![CDATA[<p>Something I had to dig around for today was how to perform a sum on a table using Criteria Builder. It seems that it is treated a bit different than a normal query would be. Here is an example of what I tried and failed at:</p>

<p>``` java
def c = Transaction.createCriteria()
def cnt = c.get {
  projections {</p>

<pre><code>sum("amount")
</code></pre>

<p>  }
  and {</p>

<pre><code>eq("status", k)
eq("transactionType", transactionType)
ge("dateTimeProcessed", cal1.getTime())
le("dateTimeProcessed", cal2.getTime())
</code></pre>

<p>  }
}
```</p>

<p>After playing around with it a bit, I found that I can't use the 'and' closure. I revised the code to the following and it worked:</p>

<p>``` java
def c = Transaction.createCriteria()
def cnt = c.get {
  projections {</p>

<pre><code>sum("amount")
</code></pre>

<p>  }
  eq("status", k)
  eq("transactionType", transactionType)
  ge("dateTimeProcessed", cal1.getTime())
  le("dateTimeProcessed", cal2.getTime())
}
```</p>
]]></content>
  </entry>
  
</feed>
