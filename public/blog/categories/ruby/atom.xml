<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | coderberry]]></title>
  <link href="http://coderberry.me/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://coderberry.me/"/>
  <updated>2012-04-23T09:08:51-06:00</updated>
  <id>http://coderberry.me/</id>
  <author>
    <name><![CDATA[Eric Berry]]></name>
    <email><![CDATA[coderberry@me.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Bunny RabbitMQ]]></title>
    <link href="http://coderberry.me/blog/2011/08/09/bunny-rabbitmq/"/>
    <updated>2011-08-09T00:00:00-06:00</updated>
    <id>http://coderberry.me/blog/2011/08/09/bunny-rabbitmq</id>
    <content type="html"><![CDATA[<p><img src="/images/posts/crazy-rabbit.jpg"></p>

<p>Recently I was asked to implement <a href="https://github.com/defunkt/resque">Redis/Resque</a> into an existing project that already had Redis up and running with another Redis server. This ended up being a lot more difficult than I had anticipated due to the <a href="https://github.com/defunkt/resque/blob/master/lib/resque.rb">singleton nature</a> of the Resque gem. This led us to explore other possible options and we ended up on <a href="http://www.rabbitmq.com/">RabbitMQ</a>.</p>

<p>RabbitMQ has two heavily supported gems that can be used to interface with our Rails app. One of them is the <a href="http://rubydoc.info/github/ruby-amqp/amqp/master/file/docs/AMQP091ModelExplained.textile">AMQP gem</a>. It is very powerful and acts as a daemon for both publisher and consumer. Our needs aren't as big, however, so we decided to use the <a href="https://github.com/celldee/bunny">bunny gem</a>.</p>

<p>Initially, I started off by wanting to create a publisher/consumer scenario. I installed RabbitMQ on a <a href="http://www.virtualbox.org/">VirtualBox</a> using <a href="http://vagrantup.com/">Vagrant</a>.</p>

<p><code>
$ gem install vagrant # See vangrantup.com for install instructions
$ vagrant box add base http://files.vagrantup.com/lucid32.box
$ vagrant init
</code></p>

<p>Make sure you modify your Vagrantfile to allow port access for the tcp protocol:</p>

<p><code>ruby    
config.vm.forward_port "tcp", 5672, 5672
</code></p>

<p>Then I started up the server, logged in and installed the RabbitMQ server:</p>

<pre><code>$ vagrant up
$ vagrant ssh
vagrant@lucid32:~$ sudo apt-get install rabbitmq-server
...
</code></pre>

<p>Once this is done, the RabbitMQ server starts automatically. To ensure that it's working you can run the following command. Remember to run it as sudo.</p>

<p><code>
vagrant@lucid32:~$ sudo rabbitmqctl list_queues
Listing queues ...
...done.
vagrant@lucid32:~$
</code></p>

<p>Now that this works, let's play with the gem. Ensure that you have the bunny gem installed.</p>

<p><code>
$ gem install bunny
</code></p>

<p>Once this is installed, start up a console and we will create a queue.</p>

<p>``` ruby
$ irb</p>

<blockquote><p>require 'rubygems'
 => true
require 'bunny'
 => true
my_client = Bunny.new
 => #&lt;Bunny::Client:0x1095a..., @port=5672>
my_client.start
 => :connected
my_queue = my_client.queue('my_first_queue')
 => #&lt;Bunny::Queue:0x1063v..., @port=5672>>
```</p></blockquote>

<p>Now we have a queue created. Let's go back to our RabbitMQ server and run the list_queues command again.</p>

<p><code>
vagrant@lucid32:~$ sudo rabbitmqctl list_queues
Listing queues ...
my_first_queue  0
...done.
vagrant@lucid32:~$
</code></p>

<p>As you can see, we now have the <em>my_first_queue</em> queue created with 0 items in the queue.</p>

<p>Let's now add a message to the queue.</p>

<p>``` ruby</p>

<blockquote><p>direct_exchange = my_client.exchange('')
direct_exchange.publish('This is my first message', :key => my_queue.name
 => nil
my_queue.message_count
 => 1
```</p></blockquote>

<p>And now when you run the <em>list_queues</em> command, you will see it has a <strong>1</strong> after the <em>my_first_queue</em>.</p>

<p><code>
vagrant@lucid32:~$ sudo rabbitmqctl list_queues
Listing queues ...
my_first_queue  1
...done.
vagrant@lucid32:~$
</code></p>

<p>Awesome. Now that we know how to add messages into our RabbitMQ server using the bunny gem, let's now create a consumer to read the messages from the queue.</p>

<p>Let's open up another terminal and run irb. This part will be the same as before.</p>

<p>```
$ irb</p>

<blockquote><p>require 'rubygems'
 => true
require 'bunny'
 => true
my_client = Bunny.new
 => #&lt;Bunny::Client:0x1095a..., @port=5672>
my_client.start
 => :connected
my_queue = my_client.queue('my_first_queue')
 => #&lt;Bunny::Queue:0x1063v..., @port=5672>>
 ...
my_queue.message_count
 => 1
```</p></blockquote>

<p>To grab the next item in the queue, we would call <em>pop</em> on <em>my_queue</em></p>

<p>``` ruby</p>

<blockquote><p>msg = my_queue.pop[:payload]
 => "This is a test message"
my_queue.message_count
 => 0
```</p></blockquote>

<p>If we want it to run as a listener, we can place the <em>pop</em> in a loop.</p>

<p>``` ruby</p>

<blockquote><p>loop do
  if my_queue.message_count > 0</p>

<pre><code>msg = my_queue.pop[:payload]
puts "Found Message: #{msg}"
</code></pre>

<p>  else</p>

<pre><code>sleep 5
</code></pre>

<p>  end
end
```</p></blockquote>

<p>There you have it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to fix the iconv require error in Ruby 1.9 and RVM]]></title>
    <link href="http://coderberry.me/blog/2011/05/17/how-to-fix-the-iconv-require-error-in-ruby-1-dot-9-and-rvm/"/>
    <updated>2011-05-17T00:00:00-06:00</updated>
    <id>http://coderberry.me/blog/2011/05/17/how-to-fix-the-iconv-require-error-in-ruby-1-dot-9-and-rvm</id>
    <content type="html"><![CDATA[<p><em>This post was copied from <a href="http://exceptionz.wordpress.com/2010/02/03/how-to-fix-the-iconv-require-error-in-ruby-1-9/">exceptions.wordpress.com</a> with minor updates.</em></p>

<p>So you are working with RVM / Rails 3 / Ruby 1.9.2 and you keep on getting the following error:</p>

<p><code>
'require': no such file to load â€“ iconv (LoadError)
</code></p>

<p><strong>To fix the issue, perform the following steps:</strong></p>

<ol>
<li>Install readline using rvm: rvm install readline rvm package install readline</li>
<li>Now install iconv by executing: rvm install iconv rvm package install iconv</li>
<li>If you already have a version of Ruby 1.9 installed, we need to remove it by executing:</li>
</ol>


<p><code>
$ rvm remove 1.9.2
</code></p>

<ol>
<li>The final step is to re-install the version of ruby:</li>
</ol>


<p><code>
$ rvm install --trace 1.9.2 -C --with-iconv-dir=$HOME/.rvm/usr
</code></p>

<p><strong>Now to test that it worked:</strong></p>

<ol>
<li>Change to the ruby version you installed: <em>rvm use 1.9.2</em></li>
<li>Check you are on the right version of ruby:</li>
</ol>


<p><code>
$ ruby -v
ruby 1.9.2p180 (2011-02-18 revision 30909) [x86_64-darwin10.6.0]
</code></p>

<ol>
<li>Start a new irb session</li>
<li>Now you should be able to require 'iconv' and get a 'true' result</li>
</ol>


<p><code>
ruby-1.9.2-p180 :001 &gt; require 'iconv'
=&gt; true
</code></p>

<p>Now you should be good to go!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Multi-Line Rails Logger Trick]]></title>
    <link href="http://coderberry.me/blog/2010/05/27/multi-line-rails-logger-trick/"/>
    <updated>2010-05-27T00:00:00-06:00</updated>
    <id>http://coderberry.me/blog/2010/05/27/multi-line-rails-logger-trick</id>
    <content type="html"><![CDATA[<p>One thing that I like to do with my logger output is allow for multi-line output. It makes it much easier to read and keeps my code cleaner.</p>

<p>Instead of doing this:</p>

<p><code>ruby
logger.info "Current Contest: #{@contest.name}"
logger.info "Current User: #{@contest.name}"
</code></p>

<p>You can do this:</p>

<p>``` ruby
logger.info """</p>

<pre><code>Current Contest: #{@contest.name}
Current User: #{@contest.name}
</code></pre>

<p>"""
```</p>
]]></content>
  </entry>
  
</feed>
